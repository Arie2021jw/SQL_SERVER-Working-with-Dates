Exercise #1: Create a calendar for the current month


Solution #1: We create a calendar for the current month using:
a) to generate dates: functions GENERATE_SERIES, DATEADD, DAY, MONTH, DATEDIFF, GETDATE 
b) to group dates: functions DATEPART, DAY, MONTH, WEEKDAY, ISO_WEEK, WEEK, and a CASE statement
c) to pivot on the day of the week: 7 CASE statements
d) to remove NULLs: function MAX

Table used: [AdventureWorks2022].[Person].[BusinessEntity]

	Query #1:
	---------
SELECT MAX(CASE Y.DayOfWeek WHEN 2 THEN Y.DayOfMonth END) AS Mo
, MAX(CASE Y.DayOfWeek WHEN 3 THEN Y.DayOfMonth END) AS Tu
, MAX(CASE Y.DayOfWeek WHEN 4 THEN Y.DayOfMonth END) AS We
, MAX(CASE Y.DayOfWeek WHEN 5 THEN Y.DayOfMonth END) AS Th
, MAX(CASE Y.DayOfWeek WHEN 6 THEN Y.DayOfMonth END) AS Fr
, MAX(CASE Y.DayOfWeek WHEN 7 THEN Y.DayOfMonth END) AS Sa
, MAX(CASE Y.DayOfWeek WHEN 1 THEN Y.DayOfMonth END) AS Su
FROM (
	SELECT DATENAME(WEEKDAY, X.GeneratedDates) AS GeneratedWeekDays			-- GenerateWeekDaysLevel2
	, X.GeneratedDates
	, DAY(X.GeneratedDates) AS DayOfMonth
	, DATEPART(MONTH, X.GeneratedDates) AS CurrentMonth
	, DATEPART(WEEKDAY, X.GeneratedDates) AS [DayOfWeek]
	, DATEPART(ISO_WEEK, X.GeneratedDates) AS ISOWeek 
	, CASE WHEN DATEPART(WEEKDAY, X.GeneratedDates) = 1
			THEN DATEPART(WEEK, X.GeneratedDates) - 1
			ELSE DATEPART(WEEK, X.GeneratedDates)
			END AS WK
		FROM (
		SELECT						-- GenerateDatesInYear_1_Dec_31_DecLevel1
		CAST(DATEADD(DAY, value, (SELECT DISTINCT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) FROM [AdventureWorks2022].[Person].[BusinessEntity])) AS DATE) AS GeneratedDates
		FROM GENERATE_SERIES(0
				     , DATEDIFF(DAY
				     		, (SELECT DISTINCT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) FROM [AdventureWorks2022].[Person].[BusinessEntity])
						, (SELECT DISTINCT DATEADD(MONTH,DATEDIFF(MONTH, -1, GETDATE()),-1) FROM [AdventureWorks2022].[Person].[BusinessEntity]))
				     , 1)			-- GenerateDatesInYear_1_Dec_31_DecLevel1
		) AS X									-- GenerateWeekDaysLevel2
	) AS Y
GROUP BY Y.WK
ORDER BY Y.WK


	-- OUTPUT
Mo	Tu	We	Th	Fr	Sa	Su
NULL	NULL	NULL	NULL	NULL	NULL	1
2	3	4	5	6	7	8
9	10	11	12	13	14	15
16	17	18	19	20	21	22
23	24	25	26	27	28	29
30	31	NULL	NULL	NULL	NULL	NULL
(end of results)
(6 rows affected)

Warning: Null value is eliminated by an aggregate or other SET operation.




Below are the queries used step-by-step for this solution.

	Query #1.1: We generate the list of dates between 01-Dec-2024 and 31-Dec-2024 using functions DATEADD, MONTH, DATEDIFF, GETDATE
	-----------
SELECT CAST(DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) AS DATE) AS FirstDayofCurrentMonth
SELECT CAST(DATEADD(MONTH,DATEDIFF(MONTH, -1, GETDATE()),-1) AS DATE) AS LastDayofCurrentMonth


	-- OUTPUT #1:
FirstDayofCurrentMonth
2024-12-01
(end of results)
(1 row affected)

	-- OUTPUT #2:
LastDayofCurrentMonth
2024-12-31
(end of results)
(1 row affected)



	Query #1.2: We generate the list of dates between 01-Dec-2024 and 31-Dec-2024 using function GENERATE_SERIES
	-----------
SELECT						-- GenerateDatesInYear_1_Dec_31_DecLevel1
CAST(DATEADD(DAY, value, (SELECT DISTINCT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) FROM [AdventureWorks2022].[Person].[BusinessEntity])) AS DATE) AS GeneratedDates
FROM GENERATE_SERIES(0
		     , DATEDIFF(DAY
				, (SELECT DISTINCT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) FROM [AdventureWorks2022].[Person].[BusinessEntity])
				, (SELECT DISTINCT DATEADD(MONTH,DATEDIFF(MONTH, -1, GETDATE()),-1) FROM [AdventureWorks2022].[Person].[BusinessEntity]))
		    , 1)			-- GenerateDatesInYear_1_Dec_31_DecLevel1

	-- OUTPUT
GeneratedDates
12/1/2024
12/2/2024
12/3/2024
12/4/2024
12/5/2024
12/6/2024
12/7/2024
12/8/2024
...................TRUNCATED RESULTS ......
12/25/2024
12/26/2024
12/27/2024
12/28/2024
12/29/2024
12/30/2024
12/31/2024
(end of results)
(31 rows affected)




	Query #1.3: We group the dates using functions DATEPART, DAY, MONTH, WEEKDAY, ISO_WEEK, WEEK, and a CASE statement
	-----------
SELECT DATENAME(WEEKDAY, X.GeneratedDates) AS GeneratedWeekDays				-- GenerateWeekDaysLevel2
, X.GeneratedDates
, DAY(X.GeneratedDates) AS DayOfMonth
, DATEPART(MONTH, X.GeneratedDates) AS CurrentMonth
, DATEPART(WEEKDAY, X.GeneratedDates) AS [DayOfWeek]
, DATEPART(ISO_WEEK, X.GeneratedDates) AS ISOWeek 
, CASE WHEN DATEPART(WEEKDAY, X.GeneratedDates) = 1
		THEN DATEPART(WEEK, X.GeneratedDates) - 1
		ELSE DATEPART(WEEK, X.GeneratedDates)
		END AS WK
	FROM (
	SELECT						-- GenerateDatesInYear_1_Dec_31_DecLevel1
	CAST(DATEADD(DAY, value, (SELECT DISTINCT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) FROM [AdventureWorks2022].[Person].[BusinessEntity])) AS DATE) AS GeneratedDates
	FROM GENERATE_SERIES(0
			     , DATEDIFF(DAY
			     		, (SELECT DISTINCT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) FROM [AdventureWorks2022].[Person].[BusinessEntity])
					, (SELECT DISTINCT DATEADD(MONTH,DATEDIFF(MONTH, -1, GETDATE()),-1) FROM [AdventureWorks2022].[Person].[BusinessEntity]))
			     , 1)			-- GenerateDatesInYear_1_Dec_31_DecLevel1
	) AS X									-- GenerateWeekDaysLevel2

	-- OUTPUT
GeneratedWeekDays	GeneratedDates	DayOfMonth	CurrentMonth	DayOfWeek	ISOWeek
Sunday			12/1/2024	1		12		1		48
Monday			12/2/2024	2		12		2		49
Tuesday			12/3/2024	3		12		3		49
Wednesday		12/4/2024	4		12		4		49
Thursday		12/5/2024	5		12		5		49
Friday			12/6/2024	6		12		6		49
Saturday		12/7/2024	7		12		7		49
Sunday			12/8/2024	8		12		1		49
Monday			12/9/2024	9		12		2		50
Tuesday			12/10/2024	10		12		3		50
Wednesday		12/11/2024	11		12		4		50
Thursday		12/12/2024	12		12		5		50
Friday			12/13/2024	13		12		6		50
Saturday		12/14/2024	14		12		7		50
Sunday			12/15/2024	15		12		1		50
Monday			12/16/2024	16		12		2		51
Tuesday			12/17/2024	17		12		3		51
Wednesday		12/18/2024	18		12		4		51
Thursday		12/19/2024	19		12		5		51
Friday			12/20/2024	20		12		6		51
Saturday		12/21/2024	21		12		7		51
Sunday			12/22/2024	22		12		1		51
Monday			12/23/2024	23		12		2		52
Tuesday			12/24/2024	24		12		3		52
Wednesday		12/25/2024	25		12		4		52
Thursday		12/26/2024	26		12		5		52
Friday			12/27/2024	27		12		6		52
Saturday		12/28/2024	28		12		7		52
Sunday			12/29/2024	29		12		1		52
Monday			12/30/2024	30		12		2		1
Tuesday			12/31/2024	31		12		3		1
(end of results)
(31 rows affected)




	Query #1.4: We pivot the dates of current month on the days of the week (Mo, Tu, We, Th, etc.) we use 7 CASE statements
	-----------
SELECT CASE Y.DayOfWeek WHEN 2 THEN Y.DayOfMonth END AS Mo			-- PivotDatesCurrentMonthIntoDaysOfWeekLevel3
, CASE Y.DayOfWeek WHEN 3 THEN Y.DayOfMonth END AS Tu
, CASE Y.DayOfWeek WHEN 4 THEN Y.DayOfMonth END AS We
, CASE Y.DayOfWeek WHEN 5 THEN Y.DayOfMonth END AS Th
, CASE Y.DayOfWeek WHEN 6 THEN Y.DayOfMonth END AS Fr
, CASE Y.DayOfWeek WHEN 7 THEN Y.DayOfMonth END AS Sa
, CASE Y.DayOfWeek WHEN 1 THEN Y.DayOfMonth END AS Su
FROM (
	SELECT DATENAME(WEEKDAY, X.GeneratedDates) AS GeneratedWeekDays		-- GenerateWeekDaysLevel2
	, X.GeneratedDates
	, DAY(X.GeneratedDates) AS DayOfMonth
	, DATEPART(MONTH, X.GeneratedDates) AS CurrentMonth
	, DATEPART(WEEKDAY, X.GeneratedDates) AS [DayOfWeek]
	, DATEPART(ISO_WEEK, X.GeneratedDates) AS ISOWeek 
	, CASE WHEN DATEPART(WEEKDAY, X.GeneratedDates) = 1
			THEN DATEPART(WEEK, X.GeneratedDates) - 1
			ELSE DATEPART(WEEK, X.GeneratedDates)
			END AS WK
		FROM (
		SELECT					-- GenerateDatesInYear_1_Dec_31_DecLevel1
		CAST(DATEADD(DAY, value, (SELECT DISTINCT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) FROM [AdventureWorks2022].[Person].[BusinessEntity])) AS DATE) AS GeneratedDates
		FROM GENERATE_SERIES(0
				     , DATEDIFF(DAY
						, (SELECT DISTINCT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) FROM [AdventureWorks2022].[Person].[BusinessEntity])
						, (SELECT DISTINCT DATEADD(MONTH,DATEDIFF(MONTH, -1, GETDATE()),-1) FROM [AdventureWorks2022].[Person].[BusinessEntity]))
				     , 1)		-- GenerateDatesInYear_1_Dec_31_DecLevel1
		) AS X						-- GenerateWeekDaysLevel2
	) AS Y								-- PivotDatesCurrentMonthIntoDaysOfWeekLevel3

	-- OUTPUT
Mo	Tu	We	Th	Fr	Sa	Su
NULL	NULL	NULL	NULL	NULL	NULL	1
2	NULL	NULL	NULL	NULL	NULL	NULL
NULL	3	NULL	NULL	NULL	NULL	NULL
NULL	NULL	4	NULL	NULL	NULL	NULL
NULL	NULL	NULL	5	NULL	NULL	NULL
NULL	NULL	NULL	NULL	6	NULL	NULL
NULL	NULL	NULL	NULL	NULL	7	NULL
NULL	NULL	NULL	NULL	NULL	NULL	8
9	NULL	NULL	NULL	NULL	NULL	NULL
NULL	10	NULL	NULL	NULL	NULL	NULL
NULL	NULL	11	NULL	NULL	NULL	NULL
NULL	NULL	NULL	12	NULL	NULL	NULL
NULL	NULL	NULL	NULL	13	NULL	NULL
NULL	NULL	NULL	NULL	NULL	14	NULL
NULL	NULL	NULL	NULL	NULL	NULL	15
16	NULL	NULL	NULL	NULL	NULL	NULL
NULL	17	NULL	NULL	NULL	NULL	NULL
NULL	NULL	18	NULL	NULL	NULL	NULL
NULL	NULL	NULL	19	NULL	NULL	NULL
NULL	NULL	NULL	NULL	20	NULL	NULL
NULL	NULL	NULL	NULL	NULL	21	NULL
NULL	NULL	NULL	NULL	NULL	NULL	22
23	NULL	NULL	NULL	NULL	NULL	NULL
NULL	24	NULL	NULL	NULL	NULL	NULL
NULL	NULL	25	NULL	NULL	NULL	NULL
NULL	NULL	NULL	26	NULL	NULL	NULL
NULL	NULL	NULL	NULL	27	NULL	NULL
NULL	NULL	NULL	NULL	NULL	28	NULL
NULL	NULL	NULL	NULL	NULL	NULL	29
30	NULL	NULL	NULL	NULL	NULL	NULL
NULL	31	NULL	NULL	NULL	NULL	NULL
(end of results)
(31 rows affected)


After we pivot the current dates, we proceed to (see Query #1):
a) remove the NULLs by applying function MAX to all 7 CASE statements, and
b) we group by the rows by the column WK (ISO_WEEK).
