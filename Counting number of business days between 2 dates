Exercise #1: Count the number of business days between the oldest and youngest employees.


Solution #1: We count the number of business days between 2 dates (BirthDate for oldest and youngest employees) using function GENERATE_SERIES.

Table used: [AdventureWorks2022].[HumanResources].[Employee]

	Query #1: We count the number of days between 2 dates using function GENERATE_SERIES
	---------
SELECT FORMAT(COUNT(*),'#,#') AS CountBusinessdays		-- CountBusinessDaysLevel4
FROM (
	SELECT X.GeneratedDates									-- GenerateBusinessDaysLevel3
	, DATENAME(weekday, X.GeneratedDates) AS GeneratedWeekDays				
	FROM
		(
		SELECT									--GeneratedDatesLevel1
		CAST(DATEADD(DAY, value, (SELECT MIN(BirthDate) FROM [AdventureWorks2022].[HumanResources].[Employee])) AS DATE) AS GeneratedDates
		FROM GENERATE_SERIES(0, DATEDIFF(DAY,(SELECT MIN(BirthDate) FROM [AdventureWorks2022].[HumanResources].[Employee]), (SELECT MAX(BirthDate) FROM [AdventureWorks2022].[HumanResources].[Employee])), 1) 		-- GeneratedDatesLevel1
		) AS X	
	WHERE DATENAME(weekday, X.GeneratedDates) NOT IN ('Saturday','Sunday')			-- GenerateBusinessDaysLevel3
	) AS Y							-- CountBusinessDaysLevel4


	-- OUTPUT
CountWeekdays
10,338
(end of results)
(1 row affected)



Below are the queries used step-by-step for this solution.

	Query #1.1: We retrieve the BirthDates for oldest and youngest employees
	-----------
SELECT MIN(BirthDate) AS OldestEmployee FROM [AdventureWorks2022].[HumanResources].[Employee];
SELECT MAX(BirthDate) AS YoungestEmployee FROM [AdventureWorks2022].[HumanResources].[Employee];

	-- OUTPUT #1:
OldestEmployee
1951-10-17
(end of results)
(1 row affected)

	-- OUTPUT #2:
YoungestEmployee
1991-05-31
(end of results)
(1 row affected)



	Query #1.2: We generate the list of dates between oldest and youngest employees's BirthDate using function GENERATE_SERIES
	-----------
SELECT CAST(DATEADD(DAY, value, (SELECT MIN(BirthDate) FROM [AdventureWorks2022].[HumanResources].[Employee])
	) AS DATE) AS GeneratedDates
FROM GENERATE_SERIES(0, DATEDIFF(DAY,(SELECT MIN(BirthDate) FROM [AdventureWorks2022].[HumanResources].[Employee]), (SELECT MAX(BirthDate) FROM [AdventureWorks2022].[HumanResources].[Employee])), 1)

	-- OUTPUT
GeneratedDates
10/17/1951
10/18/1951
10/19/1951
10/20/1951
10/21/1951
...................TRUNCATED RESULTS ......
5/27/1991
5/28/1991
5/29/1991
5/30/1991
5/31/1991
(end of results)
(14472 rows affected)



	Query #1.2.1: If needed, we can also verify the list of generated dates by "manually" typing in the dates into the function 
	-------------
SELECT CAST(DATEADD(DAY, value, '1951-10-17') AS DATE) AS GeneratedDates
FROM GENERATE_SERIES(0, DATEDIFF(DAY,'1951-10-17', '1991-05-31'), 1);

	-- OUTPUT
GeneratedDates
10/17/1951
10/18/1951
10/19/1951
10/20/1951
10/21/1951
...................TRUNCATED RESULTS ......
5/27/1991
5/28/1991
5/29/1991
5/30/1991
5/31/1991
(end of results)
(14472 rows affected)



	Query #1.3: We add column "GenerateWeekDays" that shows every day of the week using function DATENAME
	-----------
SELECT X.GeneratedDates						-- GenerateWeekDaysLevel2
, DATENAME(weekday, X.GeneratedDates) AS GeneratedWeekDays				
FROM
	(
	SELECT										--GenerateDatesLevel1
	CAST(DATEADD(DAY, value, (SELECT MIN(BirthDate) FROM [AdventureWorks2022].[HumanResources].[Employee])) AS DATE) AS GeneratedDates
	FROM GENERATE_SERIES(0, DATEDIFF(DAY,(SELECT MIN(BirthDate) FROM [AdventureWorks2022].[HumanResources].[Employee]), (SELECT MAX(BirthDate) FROM [AdventureWorks2022].[HumanResources].[Employee])), 1) 		
											-- GenerateDatesLevel1
	) AS X							-- GenerateWeekDaysLevel2

	-- OUTPUT
GeneratedDates	GeneratedWeekDays
10/17/1951	Wednesday
10/18/1951	Thursday
10/19/1951	Friday
10/20/1951	Saturday
10/21/1951	Sunday
10/22/1951	Monday
.............................TRUNCATED RESULTS ......
5/22/1991	Wednesday
5/23/1991	Thursday
5/24/1991	Friday
5/25/1991	Saturday
5/26/1991	Sunday
5/27/1991	Monday
5/28/1991	Tuesday
5/29/1991	Wednesday
5/30/1991	Thursday
5/31/1991	Friday
(end of results)
(14472 rows affected)



	Query #1.4: We generate the list of business dates by excluding the rows for column "GenerateWeekDays" having 'Saturday','Sunday' using the WHERE clause
	-----------

SELECT X.GeneratedDates										-- GenerateBusinessDaysLevel3
, DATENAME(weekday, X.GeneratedDates) AS GeneratedWeekDays				
FROM
	(
	SELECT									--GeneratedDatesLevel1
	CAST(DATEADD(DAY, value, (SELECT MIN(BirthDate) FROM [AdventureWorks2022].[HumanResources].[Employee])) AS DATE) AS GeneratedDates
	FROM GENERATE_SERIES(0, DATEDIFF(DAY,(SELECT MIN(BirthDate) FROM [AdventureWorks2022].[HumanResources].[Employee]), (SELECT MAX(BirthDate) FROM [AdventureWorks2022].[HumanResources].[Employee])), 1) 	
										-- GeneratedDatesLevel1
	) AS X	
WHERE DATENAME(weekday, X.GeneratedDates) NOT IN ('Saturday','Sunday')				-- GenerateBusinessDaysLevel3

	-- OUTPUT
GeneratedDates	GeneratedDates
10/17/1951	Wednesday
10/18/1951	Thursday
10/19/1951	Friday
10/22/1951	Monday
10/23/1951	Tuesday
10/24/1951	Wednesday
10/25/1951	Thursday
10/26/1951	Friday
10/29/1951	Monday
.............................TRUNCATED RESULTS ......
5/21/1991	Tuesday
5/22/1991	Wednesday
5/23/1991	Thursday
5/24/1991	Friday
5/27/1991	Monday
5/28/1991	Tuesday
5/29/1991	Wednesday
5/30/1991	Thursday
5/31/1991	Friday
(end of results)
(10338 rows affected)





Solution #2: As an alternative for solution #1, we count the number of business days between 2 dates (BirthDate for oldest and youngest employees) using a Cartesian Product.

	Query #2: We count the number of business days between 2 dates using a Cartesian Product and a Iteration
	---------
		+ Cartesian Product
		+ 1 Iteration
SELECT																-- CountBusinessDatesLevel3
FORMAT(SUM(CASE WHEN DATENAME(WEEKDAY, DATEADD(DAY, Iteration.Position - 1, EmployeesBirthDates.OldestEmployee)) IN ('Saturday','Sunday') THEN 0
				ELSE 1
				END), '#,#') AS CountBusinessdays
FROM (
	SELECT MIN(BirthDate) AS OldestEmployee				-- DatesOldestYoungestOriginalTablesLevel1
	, MAX(BirthDate) AS YoungestEmployee
	FROM [AdventureWorks2022].[HumanResources].[Employee]		-- DatesOldestYoungestOriginalTablesLevel1
	) AS EmployeesBirthDates,
	(
	SELECT ROW_NUMBER() OVER (ORDER BY SalesOrderDetailID) AS Position		-- IterationLevel1
	FROM [AdventureWorks2022].[Sales].[SalesOrderDetail]				-- IterationLevel1
	) AS Iteration
WHERE Iteration.Position <= DATEDIFF(DAY, EmployeesBirthDates.OldestEmployee, EmployeesBirthDates.YoungestEmployee) + 1		-- CountBusinessDatesLevel3


	-- OUTPUT
CountBusinessdays
10,338
(end of results)
(1 row affected)



Below are the queries used step-by-step for this solution.

	Query #2.1: We generate the columns involved in the process to generate the list of dates between 2 dates via Iteration 
	-----------
SELECT Iteration.Position										-- IterationLevelandGeneratedDated2
, EmployeesBirthDates.OldestEmployee
, EmployeesBirthDates.YoungestEmployee
, DATEDIFF(DAY, EmployeesBirthDates.OldestEmployee, EmployeesBirthDates.YoungestEmployee) + 1 AS DiffDaysEmployeeDates
, (DATEDIFF(DAY, EmployeesBirthDates.OldestEmployee, EmployeesBirthDates.YoungestEmployee) + 1) - Iteration.Position AS IterationOnWhereClause
, DATEADD(DAY, Iteration.Position - 1, EmployeesBirthDates.OldestEmployee) AS GeneratedDates
FROM (
	SELECT MIN(BirthDate) AS OldestEmployee				-- DatesOldestYoungestOriginalTablesLevel1
	, MAX(BirthDate) AS YoungestEmployee
	FROM [AdventureWorks2022].[HumanResources].[Employee]		-- DatesOldestYoungestOriginalTablesLevel1
	) AS EmployeesBirthDates,
	(
	SELECT ROW_NUMBER() OVER (ORDER BY SalesOrderDetailID) AS Position		-- IterationLevel1
	FROM [AdventureWorks2022].[Sales].[SalesOrderDetail]				-- IterationLevel1
	) AS Iteration
WHERE Iteration.Position <= DATEDIFF(DAY, EmployeesBirthDates.OldestEmployee, EmployeesBirthDates.YoungestEmployee) + 1
GROUP BY Iteration.Position, EmployeesBirthDates.OldestEmployee, EmployeesBirthDates.YoungestEmployee
ORDER BY DATEADD(DAY, Iteration.Position, EmployeesBirthDates.OldestEmployee)				-- IterationLevelandGeneratedDated2


	-- OUTPUT
Position	OldestEmployee	YoungestEmployee	DiffDaysEmployeeDates	IterationOnWhereClause	GeneratedDates
1		10/17/1951	5/31/1991		14472			14471			10/17/1951
2		10/17/1951	5/31/1991		14472			14470			10/18/1951
3		10/17/1951	5/31/1991		14472			14469			10/19/1951
4		10/17/1951	5/31/1991		14472			14468			10/20/1951
5		10/17/1951	5/31/1991		14472			14467			10/21/1951
6		10/17/1951	5/31/1991		14472			14466			10/22/1951
.............................................................................................................TRUNCATED RESULTS ......
14467		10/17/1951	5/31/1991		14472			5			5/26/1991
14468		10/17/1951	5/31/1991		14472			4			5/27/1991
14469		10/17/1951	5/31/1991		14472			3			5/28/1991
14470		10/17/1951	5/31/1991		14472			2			5/29/1991
14471		10/17/1951	5/31/1991		14472			1			5/30/1991
14472		10/17/1951	5/31/1991		14472			0			5/31/1991
(end of results)
(14472 rows affected)



	Query #2.2: We generate the columns involved in the process to count the business days between 2 dates via Iteration and using a CASE statement 
	-----------
SELECT DATEADD(DAY, Iteration.Position - 1, EmployeesBirthDates.OldestEmployee) AS GeneratedDates				-- GeneratedBusinessDatesLevel2
, DATENAME(WEEKDAY, DATEADD(DAY, Iteration.Position, EmployeesBirthDates.OldestEmployee)) AS GeneratedWeekdates
, CASE 	WHEN DATENAME(WEEKDAY, DATEADD(DAY, Iteration.Position, EmployeesBirthDates.OldestEmployee)) IN ('Saturday','Sunday') THEN 0
		ELSE 1
		END AS CountBusinessdays
FROM (
	SELECT MIN(BirthDate) AS OldestEmployee				-- DatesOldestYoungestOriginalTablesLevel1
	, MAX(BirthDate) AS YoungestEmployee
	FROM [AdventureWorks2022].[HumanResources].[Employee]		-- DatesOldestYoungestOriginalTablesLevel1
	) AS EmployeesBirthDates,
	(
	SELECT ROW_NUMBER() OVER (ORDER BY SalesOrderDetailID) AS Position		-- IterationLevel1
	FROM [AdventureWorks2022].[Sales].[SalesOrderDetail]				-- IterationLevel1
	) AS Iteration
WHERE Iteration.Position <= DATEDIFF(DAY, EmployeesBirthDates.OldestEmployee, EmployeesBirthDates.YoungestEmployee) + 1
GROUP BY Iteration.Position, EmployeesBirthDates.OldestEmployee
ORDER BY DATEADD(DAY, Iteration.Position, EmployeesBirthDates.OldestEmployee)							-- GeneratedBusinessDatesLevel2


	-- OUTPUT
GeneratedDates		GeneratedWeekdates	CountBusinessdays
10/17/1951		Thursday		1
10/18/1951		Friday			1
10/19/1951		Saturday		0
10/20/1951		Sunday			0
10/21/1951		Monday			1
10/22/1951		Tuesday			1
10/23/1951		Wednesday		1
10/24/1951		Thursday		1
10/25/1951		Friday			1
10/26/1951		Saturday		0
10/27/1951		Sunday			0
10/28/1951		Monday			1
.........................................................TRUNCATED RESULTS ......
5/22/1991		Thursday		1
5/23/1991		Friday			1
5/24/1991		Saturday		0
5/25/1991		Sunday			0
5/26/1991		Monday			1
5/27/1991		Tuesday			1
5/28/1991		Wednesday		1
5/29/1991		Thursday		1
5/30/1991		Friday			1
5/31/1991		Saturday		0
(end of results)
(14472 rows affected)
