Exercise #1: Calculate the median employee salary for every department.


Solution #1: We calculate the median employee salary for every department using functions PERCENTILE_DISC() and PERCENTILE_CONT().

Tables used:
1) [AdventureWorks2022].[HumanResources].[EmployeeDepartmentHistory]
2) [AdventureWorks2022].[HumanResources].[Department]
3) [AdventureWorks2022].[HumanResources].[Employee]
4) [AdventureWorks2022].[HumanResources].[EmployeePayHistory]


SELECT DISTINCT Y.DepartmentName			-- PercentRank()_CumeDist()Level3
, PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY Y.SalaryRate) OVER (PARTITION BY Y.DepartmentName) AS MedianPercentileDisc
, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Y.SalaryRate) OVER (PARTITION BY Y.DepartmentName) AS MedianPercentileCont
FROM (
	SELECT X.BusinessEntityID							-- UniqueSalaryRatesLevel2
	, X.DepartmentName 
	, X.Rate AS SalaryRate
	FROM (
		SELECT EmployeeDepartmentHistory.BusinessEntityID						-- OriginalTablesLevel1
		, EmployeeDepartmentHistory.DepartmentID
		, EmployeeDepartmentHistory.ModifiedDate AS EDH_ModifiedDate
		, Department.[Name] AS DepartmentName
		, EmployeePayHistory.Rate
		, EmployeePayHistory.ModifiedDate AS EPH_ModifiedDate
		, ROW_NUMBER() OVER (PARTITION BY EmployeeDepartmentHistory.BusinessEntityID ORDER BY EmployeeDepartmentHistory.BusinessEntityID ASC, EmployeeDepartmentHistory.ModifiedDate DESC, EmployeePayHistory.ModifiedDate DESC) AS RowNumber
		FROM [AdventureWorks2022].[HumanResources].[EmployeeDepartmentHistory] AS EmployeeDepartmentHistory
		LEFT JOIN [AdventureWorks2022].[HumanResources].[Department] AS Department
			ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID
		INNER JOIN [AdventureWorks2022].[HumanResources].[Employee] AS Employee
			ON EmployeeDepartmentHistory.BusinessEntityID = Employee.BusinessEntityID				
		INNER JOIN [AdventureWorks2022].[HumanResources].[EmployeePayHistory] AS EmployeePayHistory
			ON EmployeeDepartmentHistory.BusinessEntityID = EmployeePayHistory.BusinessEntityID	-- OriginalTablesLevel1
		) AS X
	WHERE RowNumber = 1								-- UniqueSalaryRatesLevel2
	) AS Y						-- PercentRank()_CumeDist()Level3


	-- OUTPUT
DepartmentName			MedianPercentileDisc	MedianPercentileCont
Document Control		16.8269			16.8269
Engineering			32.6923			34.375
Executive			60.0962			92.7981
Facilities and Maintenance	9.25			9.25
Finance				19			19
Human Resources			16.5865			17.42785
Information Services		32.4519			32.4519
Marketing			14.4231			14.4231
Production			12.45			12.45
Production Control		16			16
Purchasing			18.2692			18.2692
Quality Assurance		10.5769			10.5769
Research and Development	40.8654			41.6731
Sales				23.0769			23.0769
Shipping and Receiving		9			9.25
Tool Design			25			26.9231
(end of results)
(16 rows affected)


	Comments on above results:
1) PERCENTILE_DISC function: calculates a specific percentile for values sorted within an entire rowset or within a group of distinct rows in a partition. 
For a specific percentile value, say P = 0.5, the function sorts the values (Y.SalaryRate) in the ORDER BY clause, then, it returns the value with the smallest cumulative distribution (CUME_DIST) value that is greater than or equal to P = 0.5.

In our example, the median is PERCENTILE_DISC (0.5), which is the 50th percentile value of column SalaryRate.

PERCENTILE_DISC calculates the percentile based on a discrete distribution of the column values. 
The result is equal to a specific column value.


2) PERCENTILE_CONT function: calculates a specific percentile based on a continuous distribution of the column SalaryRate (Y.SalaryRate).
The result is interpolated, and might not equal any of the specific values in column SalaryRate (Y.SalaryRate).
